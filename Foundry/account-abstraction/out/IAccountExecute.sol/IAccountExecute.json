{"abi":[{"type":"function","name":"executeUserOp","inputs":[{"name":"userOp","type":"tuple","internalType":"struct PackedUserOperation","components":[{"name":"sender","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"initCode","type":"bytes","internalType":"bytes"},{"name":"callData","type":"bytes","internalType":"bytes"},{"name":"accountGasLimits","type":"bytes32","internalType":"bytes32"},{"name":"preVerificationGas","type":"uint256","internalType":"uint256"},{"name":"gasFees","type":"bytes32","internalType":"bytes32"},{"name":"paymasterAndData","type":"bytes","internalType":"bytes"},{"name":"signature","type":"bytes","internalType":"bytes"}]},{"name":"userOpHash","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"executeUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32)":"8dd7712f"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"accountGasLimits\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasFees\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct PackedUserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"}],\"name\":\"executeUserOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32)\":{\"params\":{\"userOp\":\"- The operation that was just validated.\",\"userOpHash\":\"- Hash of the user's request data.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32)\":{\"notice\":\"Account may implement this execute method. passing this methodSig at the beginning of callData will cause the entryPoint to pass the full UserOp (and hash) to the account. The account should skip the methodSig, and use the callData (and optionally, other UserOp fields)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/account-abstraction/contracts/interfaces/IAccountExecute.sol\":\"IAccountExecute\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/foundry-era-contracts/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":account-abstraction/=lib/account-abstraction/contracts/\",\":ds-test/=lib/foundry-era-contracts/lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-era-contracts/=lib/foundry-era-contracts/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/foundry-era-contracts/lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/foundry-era-contracts/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solpp/=lib/foundry-era-contracts/src/solpp/solpp-generated-contracts/\"],\"viaIR\":true},\"sources\":{\"lib/account-abstraction/contracts/interfaces/IAccountExecute.sol\":{\"keccak256\":\"0x939547bd3f1d361f2e3f3ef9ce2e675c2040e964f175f0e74f09c4d5c7eb10d5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fdb848ba6ce7f8c062d8ce5db076a77687e9fb2331cbce1f21f3e3434a808672\",\"dweb:/ipfs/QmcyKAA3KD6xmmMVtzxZE7o8xm2gF9tQrGPTCL4nh4pyZs\"]},\"lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol\":{\"keccak256\":\"0x4b7bc2b9ce369bf8a3e8db9dd1fd8be5258367d9695f71b637f98509687ade8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0cfb67042753b41353f732218630707d18ec7348f5f56f62b6b412c20dcd6545\",\"dweb:/ipfs/Qmdw36rE9DunVVoiAKekYRerGeK2JmaDTQsQxSRxxRAs22\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"struct PackedUserOperation","name":"userOp","type":"tuple","components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"bytes32","name":"accountGasLimits","type":"bytes32"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"bytes32","name":"gasFees","type":"bytes32"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}]},{"internalType":"bytes32","name":"userOpHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"executeUserOp"}],"devdoc":{"kind":"dev","methods":{"executeUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32)":{"params":{"userOp":"- The operation that was just validated.","userOpHash":"- Hash of the user's request data."}}},"version":1},"userdoc":{"kind":"user","methods":{"executeUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32)":{"notice":"Account may implement this execute method. passing this methodSig at the beginning of callData will cause the entryPoint to pass the full UserOp (and hash) to the account. The account should skip the methodSig, and use the callData (and optionally, other UserOp fields)"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/foundry-era-contracts/lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","account-abstraction/=lib/account-abstraction/contracts/","ds-test/=lib/foundry-era-contracts/lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","foundry-era-contracts/=lib/foundry-era-contracts/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","murky/=lib/foundry-era-contracts/lib/murky/","openzeppelin-contracts-upgradeable/=lib/foundry-era-contracts/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","solpp/=lib/foundry-era-contracts/src/solpp/solpp-generated-contracts/"],"optimizer":{"enabled":true,"runs":1},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/account-abstraction/contracts/interfaces/IAccountExecute.sol":"IAccountExecute"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"lib/account-abstraction/contracts/interfaces/IAccountExecute.sol":{"keccak256":"0x939547bd3f1d361f2e3f3ef9ce2e675c2040e964f175f0e74f09c4d5c7eb10d5","urls":["bzz-raw://fdb848ba6ce7f8c062d8ce5db076a77687e9fb2331cbce1f21f3e3434a808672","dweb:/ipfs/QmcyKAA3KD6xmmMVtzxZE7o8xm2gF9tQrGPTCL4nh4pyZs"],"license":"MIT"},"lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol":{"keccak256":"0x4b7bc2b9ce369bf8a3e8db9dd1fd8be5258367d9695f71b637f98509687ade8d","urls":["bzz-raw://0cfb67042753b41353f732218630707d18ec7348f5f56f62b6b412c20dcd6545","dweb:/ipfs/Qmdw36rE9DunVVoiAKekYRerGeK2JmaDTQsQxSRxxRAs22"],"license":"MIT"}},"version":1},"id":8}